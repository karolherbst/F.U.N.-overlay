--- a/dlls/kernel32/tests/thread.c	
+++ a/dlls/kernel32/tests/thread.c	
@@ -714,16 +714,16 @@ static VOID test_thread_priority(void)
      }
    }
 
+   rc = pSetThreadPriorityBoost(curthread,1);
+   ok( rc != 0, "error=%d\n",GetLastError());
    todo_wine {
-     rc = pSetThreadPriorityBoost(curthread,1);
-     ok( rc != 0, "error=%d\n",GetLastError());
      rc=pGetThreadPriorityBoost(curthread,&disabled);
      ok(rc!=0 && disabled==1,
         "rc=%d error=%d disabled=%d\n",rc,GetLastError(),disabled);
-
-     rc = pSetThreadPriorityBoost(curthread,0);
-     ok( rc != 0, "error=%d\n",GetLastError());
    }
+
+   rc = pSetThreadPriorityBoost(curthread,0);
+   ok( rc != 0, "error=%d\n",GetLastError());
    rc=pGetThreadPriorityBoost(curthread,&disabled);
    ok(rc!=0 && disabled==0,
       "rc=%d error=%d disabled=%d\n",rc,GetLastError(),disabled);
--- a/dlls/kernel32/thread.c	
+++ a/dlls/kernel32/thread.c	
@@ -358,18 +358,17 @@ BOOL WINAPI GetThreadPriorityBoost(
 /**********************************************************************
  * SetThreadPriorityBoost [KERNEL32.@]  Sets priority boost for thread.
  *
- * Priority boost is not implemented. This function always returns
- * FALSE and sets last error to ERROR_CALL_NOT_IMPLEMENTED
+ * Priority boost is not implemented, but we return TRUE
+ * anyway because some games crash otherwise.
  *
  * RETURNS
- *    Always returns FALSE to indicate a failure
+ *    Always returns TRUE to fake success
  */
 BOOL WINAPI SetThreadPriorityBoost(
     HANDLE hthread, /* [in] Handle to thread */
     BOOL disable)   /* [in] TRUE to disable priority boost */
 {
-    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
-    return FALSE;
+    return TRUE;
 }
 
 
