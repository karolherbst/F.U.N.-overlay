diff --git a/src/mesa/drivers/dri/common/dri_util.c b/src/mesa/drivers/dri/common/dri_util.c
index 91ae186..025a14a 100644
--- a/src/mesa/drivers/dri/common/dri_util.c
+++ b/src/mesa/drivers/dri/common/dri_util.c
@@ -192,6 +192,8 @@ dri2CreateContextAttribs(__DRIscreen *screen, int api,
 	mesa_api = API_OPENGLES2;
 	break;
     case __DRI_API_OPENGL_CORE:
+        mesa_api = API_OPENGL_CORE;
+        break;
     default:
 	*error = __DRI_CTX_ERROR_BAD_API;
 	return NULL;
@@ -218,6 +220,19 @@ dri2CreateContextAttribs(__DRIscreen *screen, int api,
 	}
     }
 
+    /* Mesa does not support the GL_ARB_compatibilty extension or the
+     * compatibility profile.  This means that we treat a API_OPENGL 3.1 as
+     * API_OPENGL_CORE and reject API_OPENGL 3.2+.
+     */
+    if (mesa_api == API_OPENGL && major_version == 3 && minor_version == 1)
+       mesa_api = API_OPENGL_CORE;
+
+    if (mesa_api == API_OPENGL
+        && ((major_version > 3)
+            || (major_version == 3 && minor_version >= 2))) {
+       mesa_api = API_OPENGL_CORE;
+    }
+
     /* The EGL_KHR_create_context spec says:
      *
      *     "Flags are only defined for OpenGL context creation, and specifying
diff --git a/src/mesa/drivers/dri/i915/i915_context.c b/src/mesa/drivers/dri/i915/i915_context.c
index dc32292..0729479 100644
--- a/src/mesa/drivers/dri/i915/i915_context.c
+++ b/src/mesa/drivers/dri/i915/i915_context.c
@@ -146,6 +146,9 @@ bool
 i915CreateContext(int api,
 		  const struct gl_config * mesaVis,
                   __DRIcontext * driContextPriv,
+                  unsigned major_version,
+                  unsigned minor_version,
+                  unsigned *error,
                   void *sharedContextPrivate)
 {
    struct dd_function_table functions;
@@ -153,8 +156,10 @@ i915CreateContext(int api,
    struct intel_context *intel = &i915->intel;
    struct gl_context *ctx = &intel->ctx;
 
-   if (!i915)
+   if (!i915) {
+      *error = __DRI_CTX_ERROR_NO_MEMORY;
       return false;
+   }
 
    i915InitVtbl(i915);
 
@@ -163,6 +168,34 @@ i915CreateContext(int api,
    if (!intelInitContext(intel, api, mesaVis, driContextPriv,
                          sharedContextPrivate, &functions)) {
       FREE(i915);
+      *error = __DRI_CTX_ERROR_NO_MEMORY;
+      return false;
+   }
+
+   /* Now that the extension bits are known, filter against the requested API
+    * and version.
+    */
+   switch (api) {
+   case API_OPENGL: {
+      const unsigned max_version =
+         (ctx->Extensions.ARB_fragment_shader
+          && ctx->Extensions.ARB_occlusion_query)
+         ? 0x200 : 0x105;
+      const unsigned req_version = (major_version << 8) | minor_version;
+
+      if (req_version > max_version) {
+         *error = __DRI_CTX_ERROR_BAD_VERSION;
+         FREE(i915);
+         return false;
+      }
+      break;
+   }
+   case API_OPENGLES:
+   case API_OPENGLES2:
+      break;
+   default:
+      *error = __DRI_CTX_ERROR_BAD_API;
+      FREE(i915);
       return false;
    }
 
diff --git a/src/mesa/drivers/dri/i915/i915_context.h b/src/mesa/drivers/dri/i915/i915_context.h
index 7037465..f5c1596 100644
--- a/src/mesa/drivers/dri/i915/i915_context.h
+++ b/src/mesa/drivers/dri/i915/i915_context.h
@@ -322,6 +322,9 @@ do {									\
 extern bool i915CreateContext(int api,
 			      const struct gl_config * mesaVis,
 			      __DRIcontext * driContextPriv,
+                              unsigned major_version,
+                              unsigned minor_version,
+                              unsigned *error,
 			      void *sharedContextPrivate);
 
 
diff --git a/src/mesa/drivers/dri/i965/brw_context.c b/src/mesa/drivers/dri/i965/brw_context.c
index a5711e4..990b467 100644
--- a/src/mesa/drivers/dri/i965/brw_context.c
+++ b/src/mesa/drivers/dri/i965/brw_context.c
@@ -75,27 +75,80 @@ bool
 brwCreateContext(int api,
 	         const struct gl_config *mesaVis,
 		 __DRIcontext *driContextPriv,
+                 unsigned major_version,
+                 unsigned minor_version,
+                 unsigned *error,
 	         void *sharedContextPrivate)
 {
    __DRIscreen *sPriv = driContextPriv->driScreenPriv;
    struct intel_screen *screen = sPriv->driverPrivate;
    struct dd_function_table functions;
-   struct brw_context *brw = rzalloc(NULL, struct brw_context);
-   struct intel_context *intel = &brw->intel;
-   struct gl_context *ctx = &intel->ctx;
    unsigned i;
 
+   /* Filter against the requested API and version.
+    */
+   switch (api) {
+   case API_OPENGL: {
+#ifdef TEXTURE_FLOAT_ENABLED
+      const unsigned max_version =
+         (screen->gen == 6 ||
+          (screen->gen == 7 && screen->kernel_has_gen7_sol_reset))
+         ? 0x300 : 0x201;
+#else
+      const unsigned max_version = 0x201;
+#endif
+      const unsigned req_version = (major_version << 8) | minor_version;
+
+      if (req_version > max_version) {
+         *error = __DRI_CTX_ERROR_BAD_VERSION;
+         return false;
+      }
+      break;
+   }
+   case API_OPENGLES:
+   case API_OPENGLES2:
+      break;
+   case API_OPENGL_CORE: {
+#ifdef TEXTURE_FLOAT_ENABLED
+      const unsigned max_version =
+         (screen->gen == 6 ||
+          (screen->gen == 7 && screen->kernel_has_gen7_sol_reset))
+         ? 0x301 : 0;
+#else
+      const unsigned max_version = 0;
+#endif
+      const unsigned req_version = (major_version << 8) | minor_version;
+
+      if (req_version > max_version) {
+         *error = (max_version == 0)
+            ? __DRI_CTX_ERROR_BAD_API : __DRI_CTX_ERROR_BAD_VERSION;
+         return false;
+      }
+
+      break;
+   }
+   default:
+      *error = __DRI_CTX_ERROR_BAD_API;
+      return false;
+   }
+
+   struct brw_context *brw = rzalloc(NULL, struct brw_context);
    if (!brw) {
       printf("%s: failed to alloc context\n", __FUNCTION__);
+      *error = __DRI_CTX_ERROR_NO_MEMORY;
       return false;
    }
 
    brwInitDriverFunctions(screen, &functions);
 
+   struct intel_context *intel = &brw->intel;
+   struct gl_context *ctx = &intel->ctx;
+
    if (!intelInitContext( intel, api, mesaVis, driContextPriv,
 			  sharedContextPrivate, &functions )) {
       printf("%s: failed to init intel context\n", __FUNCTION__);
       FREE(brw);
+      *error = __DRI_CTX_ERROR_NO_MEMORY;
       return false;
    }
 
diff --git a/src/mesa/drivers/dri/i965/brw_context.h b/src/mesa/drivers/dri/i965/brw_context.h
index 1548f81..77d88ea 100644
--- a/src/mesa/drivers/dri/i965/brw_context.h
+++ b/src/mesa/drivers/dri/i965/brw_context.h
@@ -1097,6 +1097,9 @@ void brwInitVtbl( struct brw_context *brw );
 bool brwCreateContext(int api,
 		      const struct gl_config *mesaVis,
 		      __DRIcontext *driContextPriv,
+                      unsigned major_version,
+                      unsigned minor_version,
+                      unsigned *error,
 		      void *sharedContextPrivate);
 
 /*======================================================================
diff --git a/src/mesa/drivers/dri/intel/intel_extensions.c b/src/mesa/drivers/dri/intel/intel_extensions.c
index 76b56a2..10e664b 100755
--- a/src/mesa/drivers/dri/intel/intel_extensions.c
+++ b/src/mesa/drivers/dri/intel/intel_extensions.c
@@ -93,7 +93,11 @@ intelInitExtensions(struct gl_context *ctx)
    ctx->Extensions.OES_compressed_ETC1_RGB8_texture = true;
 
    if (intel->gen >= 6)
-      ctx->Const.GLSLVersion = 130;
+      if (ctx->API == API_OPENGL_CORE) {
+         ctx->Const.GLSLVersion = 140;
+      } else {
+         ctx->Const.GLSLVersion = 130;
+      }
    else
       ctx->Const.GLSLVersion = 120;
    _mesa_override_glsl_version(ctx);
@@ -106,6 +110,10 @@ intelInitExtensions(struct gl_context *ctx)
       ctx->Extensions.ARB_blend_func_extended = !driQueryOptionb(&intel->optionCache, "disable_blend_func_extended");
       ctx->Extensions.ARB_draw_buffers_blend = true;
       ctx->Extensions.ARB_uniform_buffer_object = true;
+
+      if (ctx->API == API_OPENGL_CORE) {
+         ctx->Extensions.ARB_texture_buffer_object = true;
+      }
    }
 
    if (intel->gen >= 5)
diff --git a/src/mesa/drivers/dri/intel/intel_screen.c b/src/mesa/drivers/dri/intel/intel_screen.c
index 3c595bc..30d24cc 100644
--- a/src/mesa/drivers/dri/intel/intel_screen.c
+++ b/src/mesa/drivers/dri/intel/intel_screen.c
@@ -680,11 +680,17 @@ extern bool
 i915CreateContext(int api,
 		  const struct gl_config *mesaVis,
 		  __DRIcontext *driContextPriv,
+                  unsigned major_version,
+                  unsigned minor_version,
+                  unsigned *error,
 		  void *sharedContextPrivate);
 extern bool
 brwCreateContext(int api,
 	         const struct gl_config *mesaVis,
 	         __DRIcontext *driContextPriv,
+                 unsigned major_version,
+                 unsigned minor_version,
+                 unsigned *error,
 		 void *sharedContextPrivate);
 
 static GLboolean
@@ -703,38 +709,43 @@ intelCreateContext(gl_api api,
 
 #ifdef I915
    if (IS_9XX(intelScreen->deviceID)) {
-      if (!IS_965(intelScreen->deviceID)) {
-	 success = i915CreateContext(api, mesaVis, driContextPriv,
-				     sharedContextPrivate);
-      }
+      success = i915CreateContext(api, mesaVis, driContextPriv,
+                                  major_version, minor_version, error,
+                                  sharedContextPrivate);
    } else {
-      intelScreen->no_vbo = true;
-      success = i830CreateContext(mesaVis, driContextPriv,
-				  sharedContextPrivate);
+      switch (api) {
+      case API_OPENGL:
+         if (major_version > 1 || minor_version > 3) {
+            *error = __DRI_CTX_ERROR_BAD_VERSION;
+            success = false;
+         }
+         break;
+      case API_OPENGLES:
+         break;
+      default:
+         *error = __DRI_CTX_ERROR_BAD_API;
+         success = false;
+      }
+
+      if (success) {
+         intelScreen->no_vbo = true;
+         success = i830CreateContext(mesaVis, driContextPriv,
+                                     sharedContextPrivate);
+         if (!success)
+            *error = __DRI_CTX_ERROR_NO_MEMORY;
+      }
    }
 #else
-   if (IS_965(intelScreen->deviceID))
-      success = brwCreateContext(api, mesaVis,
-			      driContextPriv,
-			      sharedContextPrivate);
+   success = brwCreateContext(api, mesaVis,
+                              driContextPriv,
+                              major_version, minor_version, error,
+                              sharedContextPrivate);
 #endif
 
-   if (success) {
-      struct gl_context *ctx =
-	 (struct gl_context *) driContextPriv->driverPrivate;
-
-      _mesa_compute_version(ctx);
-      if (ctx->Version >= major_version * 10 + minor_version) {
-	 return true;
-      }
-
-      *error = __DRI_CTX_ERROR_BAD_VERSION;
-      intelDestroyContext(driContextPriv);
-   } else {
-      *error = __DRI_CTX_ERROR_NO_MEMORY;
-      fprintf(stderr, "Unrecognized deviceID 0x%x\n", intelScreen->deviceID);
-   }
+   if (success)
+      return true;
 
+   intelDestroyContext(driContextPriv);
    return false;
 }
 
diff --git a/src/mesa/drivers/dri/nouveau/nouveau_context.c b/src/mesa/drivers/dri/nouveau/nouveau_context.c
index f794308..4409eae 100644
--- a/src/mesa/drivers/dri/nouveau/nouveau_context.c
+++ b/src/mesa/drivers/dri/nouveau/nouveau_context.c
@@ -59,9 +59,31 @@ nouveau_context_create(gl_api api,
 	struct nouveau_context *nctx;
 	struct gl_context *ctx;
 
+	switch (api) {
+	case API_OPENGL:
+		/* Do after-the-fact version checking (below).
+		 */
+		break;
+	case API_OPENGLES:
+		/* NV10 and NV20 can support OpenGL ES 1.0 only.  Older chips
+		 * cannot do even that.
+		 */
+		if ((screen->device->chipset & 0xf0) == 0x00) {
+			*error = __DRI_CTX_ERROR_BAD_API;
+			return GL_FALSE;
+		} else if (minor_version != 0) {
+			*error = __DRI_CTX_ERROR_BAD_VERSION;
+			return GL_FALSE;
+		}
+		break;
+	case API_OPENGLES2:
+	case API_OPENGL_CORE:
+		*error = __DRI_CTX_ERROR_BAD_API;
+		return GL_FALSE;
+	}
+
 	/* API and flag filtering is handled in dri2CreateContextAttribs.
 	 */
-	(void) api;
 	(void) flags;
 
 	ctx = screen->driver->context_create(screen, visual, share_ctx);
diff --git a/src/mesa/drivers/dri/r200/r200_context.c b/src/mesa/drivers/dri/r200/r200_context.c
index 17e08a1..5f8cc86 100644
--- a/src/mesa/drivers/dri/r200/r200_context.c
+++ b/src/mesa/drivers/dri/r200/r200_context.c
@@ -212,9 +212,22 @@ GLboolean r200CreateContext( gl_api api,
    int i;
    int tcl_mode;
 
-   /* API and flag filtering is handled in dri2CreateContextAttribs.
+   switch (api) {
+   case API_OPENGL:
+      if (major_version > 1 || minor_version > 3) {
+         *error = __DRI_CTX_ERROR_BAD_VERSION;
+         return GL_FALSE;
+      }
+      break;
+   case API_OPENGLES:
+      break;
+   default:
+      *error = __DRI_CTX_ERROR_BAD_API;
+      return GL_FALSE;
+   }
+
+   /* Flag filtering is handled in dri2CreateContextAttribs.
     */
-   (void) api;
    (void) flags;
 
    assert(glVisual);
@@ -454,11 +467,6 @@ GLboolean r200CreateContext( gl_api api,
    }
 
    _mesa_compute_version(ctx);
-   if (ctx->Version < major_version * 10 + minor_version) {
-      r200DestroyContext(driContextPriv);
-      *error = __DRI_CTX_ERROR_BAD_VERSION;
-      return GL_FALSE;
-   }
 
    *error = __DRI_CTX_ERROR_SUCCESS;
    return GL_TRUE;
diff --git a/src/mesa/drivers/dri/radeon/radeon_context.c b/src/mesa/drivers/dri/radeon/radeon_context.c
index 34c392e..e17c786 100644
--- a/src/mesa/drivers/dri/radeon/radeon_context.c
+++ b/src/mesa/drivers/dri/radeon/radeon_context.c
@@ -178,9 +178,22 @@ r100CreateContext( gl_api api,
    int i;
    int tcl_mode, fthrottle_mode;
 
-   /* API and flag filtering is handled in dri2CreateContextAttribs.
+   switch (api) {
+   case API_OPENGL:
+      if (major_version > 1 || minor_version > 3) {
+         *error = __DRI_CTX_ERROR_BAD_VERSION;
+         return GL_FALSE;
+      }
+      break;
+   case API_OPENGLES:
+      break;
+   default:
+      *error = __DRI_CTX_ERROR_BAD_API;
+      return GL_FALSE;
+   }
+
+   /* Flag filtering is handled in dri2CreateContextAttribs.
     */
-   (void) api;
    (void) flags;
 
    assert(glVisual);
@@ -402,11 +415,6 @@ r100CreateContext( gl_api api,
    }
 
    _mesa_compute_version(ctx);
-   if (ctx->Version < major_version * 10 + minor_version) {
-      radeonDestroyContext(driContextPriv);
-      *error = __DRI_CTX_ERROR_BAD_VERSION;
-      return GL_FALSE;
-   }
 
    *error = __DRI_CTX_ERROR_SUCCESS;
    return GL_TRUE;
diff --git a/src/mesa/drivers/dri/swrast/swrast.c b/src/mesa/drivers/dri/swrast/swrast.c
index ca6bda0..7773fd9 100644
--- a/src/mesa/drivers/dri/swrast/swrast.c
+++ b/src/mesa/drivers/dri/swrast/swrast.c
@@ -719,11 +719,20 @@ dri_create_context(gl_api api,
      */
     (void) flags;
 
-    if (api == API_OPENGL
-	&& (major_version > 2
-	    || (major_version == 2 && minor_version > 1))) {
-       *error = __DRI_CTX_ERROR_BAD_VERSION;
-       goto context_fail;
+    switch (api) {
+    case API_OPENGL:
+        if (major_version > 2
+	    || (major_version == 2 && minor_version > 1)) {
+            *error = __DRI_CTX_ERROR_BAD_VERSION;
+            return GL_FALSE;
+        }
+        break;
+    case API_OPENGLES:
+    case API_OPENGLES2:
+        break;
+    case API_OPENGL_CORE:
+        *error = __DRI_CTX_ERROR_BAD_API;
+        return GL_FALSE;
     }
 
     ctx = CALLOC_STRUCT(dri_context);
diff --git a/src/mesa/main/api_exec.c b/src/mesa/main/api_exec.c
index 81be46d..67f17a4 100644
--- a/src/mesa/main/api_exec.c
+++ b/src/mesa/main/api_exec.c
@@ -158,7 +158,7 @@ _mesa_create_exec_table(struct gl_context *ctx)
    SET_GetError(exec, _mesa_GetError);
    SET_GetFloatv(exec, _mesa_GetFloatv);
    SET_GetString(exec, _mesa_GetString);
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_LineStipple(exec, _mesa_LineStipple);
    }
    SET_LineWidth(exec, _mesa_LineWidth);
@@ -197,13 +197,13 @@ _mesa_create_exec_table(struct gl_context *ctx)
    }
    SET_Viewport(exec, _mesa_Viewport);
 
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       _mesa_init_accum_dispatch(exec);
       _mesa_init_dlist_dispatch(exec);
    }
 
    SET_ClearDepth(exec, _mesa_ClearDepth);
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_ClearIndex(exec, _mesa_ClearIndex);
       SET_ClipPlane(exec, _mesa_ClipPlane);
       SET_ColorMaterial(exec, _mesa_ColorMaterial);
@@ -213,9 +213,11 @@ _mesa_create_exec_table(struct gl_context *ctx)
    SET_DepthRange(exec, _mesa_DepthRange);
 
    _mesa_init_drawpix_dispatch(exec);
-   _mesa_init_feedback_dispatch(exec);
+   if (ctx->API == API_OPENGL) {
+      _mesa_init_feedback_dispatch(exec);
+   }
 
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_FogCoordPointerEXT(exec, _mesa_FogCoordPointerEXT);
       SET_Fogf(exec, _mesa_Fogf);
       SET_Fogfv(exec, _mesa_Fogfv);
@@ -241,7 +243,7 @@ _mesa_create_exec_table(struct gl_context *ctx)
    SET_GetTexParameteriv(exec, _mesa_GetTexParameteriv);
    SET_GetTexImage(exec, _mesa_GetTexImage);
    SET_Hint(exec, _mesa_Hint);
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_IndexMask(exec, _mesa_IndexMask);
    }
    SET_IsEnabled(exec, _mesa_IsEnabled);
@@ -257,24 +259,22 @@ _mesa_create_exec_table(struct gl_context *ctx)
       SET_LoadMatrixd(exec, _mesa_LoadMatrixd);
    }
 
-   _mesa_init_eval_dispatch(exec);
-
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
+      _mesa_init_eval_dispatch(exec);
       SET_MultMatrixd(exec, _mesa_MultMatrixd);
+      _mesa_init_pixel_dispatch(exec);
    }
 
-   _mesa_init_pixel_dispatch(exec);
-
    SET_PixelStoref(exec, _mesa_PixelStoref);
    SET_PointSize(exec, _mesa_PointSize);
    SET_PolygonMode(exec, _mesa_PolygonMode);
    SET_PolygonOffset(exec, _mesa_PolygonOffset);
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_PolygonStipple(exec, _mesa_PolygonStipple);
-   }
 
-   _mesa_init_attrib_dispatch(exec);
-   _mesa_init_rastpos_dispatch(exec);
+      _mesa_init_attrib_dispatch(exec);
+      _mesa_init_rastpos_dispatch(exec);
+   }
 
    SET_ReadPixels(exec, _mesa_ReadPixels);
    if (ctx->API != API_OPENGL_CORE) {
@@ -285,13 +285,15 @@ _mesa_create_exec_table(struct gl_context *ctx)
       SET_TexEnviv(exec, _mesa_TexEnviv);
    }
 
-   _mesa_init_texgen_dispatch(exec);
+   if (ctx->API != API_OPENGL_CORE) {
+      _mesa_init_texgen_dispatch(exec);
+   }
 
    SET_TexImage1D(exec, _mesa_TexImage1D);
    SET_TexParameterf(exec, _mesa_TexParameterf);
    SET_TexParameterfv(exec, _mesa_TexParameterfv);
    SET_TexParameteriv(exec, _mesa_TexParameteriv);
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_Translated(exec, _mesa_Translated);
    }
 
@@ -300,7 +302,7 @@ _mesa_create_exec_table(struct gl_context *ctx)
    SET_DeleteTextures(exec, _mesa_DeleteTextures);
    SET_GenTextures(exec, _mesa_GenTextures);
 #if _HAVE_FULL_GL
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_AreTexturesResident(exec, _mesa_AreTexturesResident);
       SET_ColorPointer(exec, _mesa_ColorPointer);
    }
@@ -341,9 +343,11 @@ _mesa_create_exec_table(struct gl_context *ctx)
    SET_BlendEquation(exec, _mesa_BlendEquation);
    SET_BlendEquationSeparateEXT(exec, _mesa_BlendEquationSeparateEXT);
 
-   _mesa_init_colortable_dispatch(exec);
-   _mesa_init_convolve_dispatch(exec);
-   _mesa_init_histogram_dispatch(exec);
+   if (ctx->API == API_OPENGL) {
+      _mesa_init_colortable_dispatch(exec);
+      _mesa_init_convolve_dispatch(exec);
+      _mesa_init_histogram_dispatch(exec);
+   }
 
    /* OpenGL 2.0 */
    SET_StencilFuncSeparate(exec, _mesa_StencilFuncSeparate);
@@ -362,7 +366,9 @@ _mesa_create_exec_table(struct gl_context *ctx)
 
    /* 3. GL_EXT_polygon_offset */
 #if _HAVE_FULL_GL
-   SET_PolygonOffsetEXT(exec, _mesa_PolygonOffsetEXT);
+   if (ctx->API == API_OPENGL) {
+      SET_PolygonOffsetEXT(exec, _mesa_PolygonOffsetEXT);
+   }
 #endif
 
    /* 6. GL_EXT_texture3d */
@@ -374,7 +380,7 @@ _mesa_create_exec_table(struct gl_context *ctx)
 
    /* 11. GL_EXT_histogram */
 #if 0
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_GetHistogramEXT(exec, _mesa_GetHistogram);
       SET_GetHistogramParameterfvEXT(exec, _mesa_GetHistogramParameterfv);
       SET_GetHistogramParameterivEXT(exec, _mesa_GetHistogramParameteriv);
@@ -397,7 +403,7 @@ _mesa_create_exec_table(struct gl_context *ctx)
 
    /* 30. GL_EXT_vertex_array */
 #if _HAVE_FULL_GL
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_ColorPointerEXT(exec, _mesa_ColorPointerEXT);
       SET_EdgeFlagPointerEXT(exec, _mesa_EdgeFlagPointerEXT);
       SET_IndexPointerEXT(exec, _mesa_IndexPointerEXT);
@@ -424,8 +430,10 @@ _mesa_create_exec_table(struct gl_context *ctx)
 
    /* 97. GL_EXT_compiled_vertex_array */
 #if _HAVE_FULL_GL
-   SET_LockArraysEXT(exec, _mesa_LockArraysEXT);
-   SET_UnlockArraysEXT(exec, _mesa_UnlockArraysEXT);
+   if (ctx->API == API_OPENGL) {
+      SET_LockArraysEXT(exec, _mesa_LockArraysEXT);
+      SET_UnlockArraysEXT(exec, _mesa_UnlockArraysEXT);
+   }
 #endif
 
    /* 148. GL_EXT_multi_draw_arrays */
@@ -454,54 +462,60 @@ _mesa_create_exec_table(struct gl_context *ctx)
 
    /* 233. GL_NV_vertex_program */
 #if FEATURE_NV_vertex_program
-   SET_BindProgramNV(exec, _mesa_BindProgram);
-   SET_DeleteProgramsNV(exec, _mesa_DeletePrograms);
-   SET_ExecuteProgramNV(exec, _mesa_ExecuteProgramNV);
-   SET_GenProgramsNV(exec, _mesa_GenPrograms);
-   SET_AreProgramsResidentNV(exec, _mesa_AreProgramsResidentNV);
-   SET_RequestResidentProgramsNV(exec, _mesa_RequestResidentProgramsNV);
-   SET_GetProgramParameterfvNV(exec, _mesa_GetProgramParameterfvNV);
-   SET_GetProgramParameterdvNV(exec, _mesa_GetProgramParameterdvNV);
-   SET_GetProgramivNV(exec, _mesa_GetProgramivNV);
-   SET_GetProgramStringNV(exec, _mesa_GetProgramStringNV);
-   SET_GetTrackMatrixivNV(exec, _mesa_GetTrackMatrixivNV);
-   SET_GetVertexAttribdvNV(exec, _mesa_GetVertexAttribdvNV);
-   SET_GetVertexAttribfvNV(exec, _mesa_GetVertexAttribfvNV);
-   SET_GetVertexAttribivNV(exec, _mesa_GetVertexAttribivNV);
-   SET_GetVertexAttribPointervNV(exec, _mesa_GetVertexAttribPointervNV);
-   SET_IsProgramNV(exec, _mesa_IsProgramARB);
-   SET_LoadProgramNV(exec, _mesa_LoadProgramNV);
-   SET_ProgramEnvParameter4dARB(exec, _mesa_ProgramEnvParameter4dARB); /* alias to ProgramParameter4dNV */
-   SET_ProgramEnvParameter4dvARB(exec, _mesa_ProgramEnvParameter4dvARB);  /* alias to ProgramParameter4dvNV */
-   SET_ProgramEnvParameter4fARB(exec, _mesa_ProgramEnvParameter4fARB);  /* alias to ProgramParameter4fNV */
-   SET_ProgramEnvParameter4fvARB(exec, _mesa_ProgramEnvParameter4fvARB);  /* alias to ProgramParameter4fvNV */
-   SET_ProgramParameters4dvNV(exec, _mesa_ProgramParameters4dvNV);
-   SET_ProgramParameters4fvNV(exec, _mesa_ProgramParameters4fvNV);
-   SET_TrackMatrixNV(exec, _mesa_TrackMatrixNV);
-   SET_VertexAttribPointerNV(exec, _mesa_VertexAttribPointerNV);
-   /* glVertexAttrib*NV functions handled in api_loopback.c */
+   if (ctx->API == API_OPENGL) {
+      SET_BindProgramNV(exec, _mesa_BindProgram);
+      SET_DeleteProgramsNV(exec, _mesa_DeletePrograms);
+      SET_ExecuteProgramNV(exec, _mesa_ExecuteProgramNV);
+      SET_GenProgramsNV(exec, _mesa_GenPrograms);
+      SET_AreProgramsResidentNV(exec, _mesa_AreProgramsResidentNV);
+      SET_RequestResidentProgramsNV(exec, _mesa_RequestResidentProgramsNV);
+      SET_GetProgramParameterfvNV(exec, _mesa_GetProgramParameterfvNV);
+      SET_GetProgramParameterdvNV(exec, _mesa_GetProgramParameterdvNV);
+      SET_GetProgramivNV(exec, _mesa_GetProgramivNV);
+      SET_GetProgramStringNV(exec, _mesa_GetProgramStringNV);
+      SET_GetTrackMatrixivNV(exec, _mesa_GetTrackMatrixivNV);
+      SET_GetVertexAttribdvNV(exec, _mesa_GetVertexAttribdvNV);
+      SET_GetVertexAttribfvNV(exec, _mesa_GetVertexAttribfvNV);
+      SET_GetVertexAttribivNV(exec, _mesa_GetVertexAttribivNV);
+      SET_GetVertexAttribPointervNV(exec, _mesa_GetVertexAttribPointervNV);
+      SET_IsProgramNV(exec, _mesa_IsProgramARB);
+      SET_LoadProgramNV(exec, _mesa_LoadProgramNV);
+      SET_ProgramEnvParameter4dARB(exec, _mesa_ProgramEnvParameter4dARB); /* alias to ProgramParameter4dNV */
+      SET_ProgramEnvParameter4dvARB(exec, _mesa_ProgramEnvParameter4dvARB);  /* alias to ProgramParameter4dvNV */
+      SET_ProgramEnvParameter4fARB(exec, _mesa_ProgramEnvParameter4fARB);  /* alias to ProgramParameter4fNV */
+      SET_ProgramEnvParameter4fvARB(exec, _mesa_ProgramEnvParameter4fvARB);  /* alias to ProgramParameter4fvNV */
+      SET_ProgramParameters4dvNV(exec, _mesa_ProgramParameters4dvNV);
+      SET_ProgramParameters4fvNV(exec, _mesa_ProgramParameters4fvNV);
+      SET_TrackMatrixNV(exec, _mesa_TrackMatrixNV);
+      SET_VertexAttribPointerNV(exec, _mesa_VertexAttribPointerNV);
+      /* glVertexAttrib*NV functions handled in api_loopback.c */
+   }
 #endif
 
    /* 273. GL_APPLE_vertex_array_object */
-   SET_BindVertexArrayAPPLE(exec, _mesa_BindVertexArrayAPPLE);
-   SET_DeleteVertexArraysAPPLE(exec, _mesa_DeleteVertexArraysAPPLE);
+   if (ctx->API == API_OPENGL) {
+      SET_BindVertexArrayAPPLE(exec, _mesa_BindVertexArrayAPPLE);
+      SET_DeleteVertexArraysAPPLE(exec, _mesa_DeleteVertexArraysAPPLE);
+   }
    SET_GenVertexArraysAPPLE(exec, _mesa_GenVertexArraysAPPLE);
    SET_IsVertexArrayAPPLE(exec, _mesa_IsVertexArrayAPPLE);
 
    /* 282. GL_NV_fragment_program */
 #if FEATURE_NV_fragment_program
-   SET_ProgramNamedParameter4fNV(exec, _mesa_ProgramNamedParameter4fNV);
-   SET_ProgramNamedParameter4dNV(exec, _mesa_ProgramNamedParameter4dNV);
-   SET_ProgramNamedParameter4fvNV(exec, _mesa_ProgramNamedParameter4fvNV);
-   SET_ProgramNamedParameter4dvNV(exec, _mesa_ProgramNamedParameter4dvNV);
-   SET_GetProgramNamedParameterfvNV(exec, _mesa_GetProgramNamedParameterfvNV);
-   SET_GetProgramNamedParameterdvNV(exec, _mesa_GetProgramNamedParameterdvNV);
-   SET_ProgramLocalParameter4dARB(exec, _mesa_ProgramLocalParameter4dARB);
-   SET_ProgramLocalParameter4dvARB(exec, _mesa_ProgramLocalParameter4dvARB);
-   SET_ProgramLocalParameter4fARB(exec, _mesa_ProgramLocalParameter4fARB);
-   SET_ProgramLocalParameter4fvARB(exec, _mesa_ProgramLocalParameter4fvARB);
-   SET_GetProgramLocalParameterdvARB(exec, _mesa_GetProgramLocalParameterdvARB);
-   SET_GetProgramLocalParameterfvARB(exec, _mesa_GetProgramLocalParameterfvARB);
+   if (ctx->API == API_OPENGL) {
+      SET_ProgramNamedParameter4fNV(exec, _mesa_ProgramNamedParameter4fNV);
+      SET_ProgramNamedParameter4dNV(exec, _mesa_ProgramNamedParameter4dNV);
+      SET_ProgramNamedParameter4fvNV(exec, _mesa_ProgramNamedParameter4fvNV);
+      SET_ProgramNamedParameter4dvNV(exec, _mesa_ProgramNamedParameter4dvNV);
+      SET_GetProgramNamedParameterfvNV(exec, _mesa_GetProgramNamedParameterfvNV);
+      SET_GetProgramNamedParameterdvNV(exec, _mesa_GetProgramNamedParameterdvNV);
+      SET_ProgramLocalParameter4dARB(exec, _mesa_ProgramLocalParameter4dARB);
+      SET_ProgramLocalParameter4dvARB(exec, _mesa_ProgramLocalParameter4dvARB);
+      SET_ProgramLocalParameter4fARB(exec, _mesa_ProgramLocalParameter4fARB);
+      SET_ProgramLocalParameter4fvARB(exec, _mesa_ProgramLocalParameter4fvARB);
+      SET_GetProgramLocalParameterdvARB(exec, _mesa_GetProgramLocalParameterdvARB);
+      SET_GetProgramLocalParameterfvARB(exec, _mesa_GetProgramLocalParameterfvARB);
+   }
 #endif
 
    /* 262. GL_NV_point_sprite */
@@ -512,7 +526,9 @@ _mesa_create_exec_table(struct gl_context *ctx)
 
    /* 268. GL_EXT_stencil_two_side */
 #if _HAVE_FULL_GL
-   SET_ActiveStencilFaceEXT(exec, _mesa_ActiveStencilFaceEXT);
+   if (ctx->API == API_OPENGL) {
+      SET_ActiveStencilFaceEXT(exec, _mesa_ActiveStencilFaceEXT);
+   }
 #endif
 
    /* 285. GL_NV_primitive_restart */
@@ -536,7 +552,7 @@ _mesa_create_exec_table(struct gl_context *ctx)
 
    /* ARB 3. GL_ARB_transpose_matrix */
 #if _HAVE_FULL_GL
-   if (ctx->API != API_OPENGL_CORE) {
+   if (ctx->API == API_OPENGL) {
       SET_LoadTransposeMatrixdARB(exec, _mesa_LoadTransposeMatrixdARB);
       SET_LoadTransposeMatrixfARB(exec, _mesa_LoadTransposeMatrixfARB);
       SET_MultTransposeMatrixdARB(exec, _mesa_MultTransposeMatrixdARB);
@@ -617,20 +633,22 @@ _mesa_create_exec_table(struct gl_context *ctx)
    SET_GetVertexAttribfvARB(exec, _mesa_GetVertexAttribfvARB);
    SET_GetVertexAttribivARB(exec, _mesa_GetVertexAttribivARB);
    /* glGetVertexAttribPointervARB aliases glGetVertexAttribPointervNV */
-   SET_ProgramEnvParameter4dARB(exec, _mesa_ProgramEnvParameter4dARB);
-   SET_ProgramEnvParameter4dvARB(exec, _mesa_ProgramEnvParameter4dvARB);
-   SET_ProgramEnvParameter4fARB(exec, _mesa_ProgramEnvParameter4fARB);
-   SET_ProgramEnvParameter4fvARB(exec, _mesa_ProgramEnvParameter4fvARB);
-   SET_ProgramLocalParameter4dARB(exec, _mesa_ProgramLocalParameter4dARB);
-   SET_ProgramLocalParameter4dvARB(exec, _mesa_ProgramLocalParameter4dvARB);
-   SET_ProgramLocalParameter4fARB(exec, _mesa_ProgramLocalParameter4fARB);
-   SET_ProgramLocalParameter4fvARB(exec, _mesa_ProgramLocalParameter4fvARB);
-   SET_GetProgramEnvParameterdvARB(exec, _mesa_GetProgramEnvParameterdvARB);
-   SET_GetProgramEnvParameterfvARB(exec, _mesa_GetProgramEnvParameterfvARB);
-   SET_GetProgramLocalParameterdvARB(exec, _mesa_GetProgramLocalParameterdvARB);
-   SET_GetProgramLocalParameterfvARB(exec, _mesa_GetProgramLocalParameterfvARB);
+   if (ctx->API == API_OPENGL) {
+      SET_ProgramEnvParameter4dARB(exec, _mesa_ProgramEnvParameter4dARB);
+      SET_ProgramEnvParameter4dvARB(exec, _mesa_ProgramEnvParameter4dvARB);
+      SET_ProgramEnvParameter4fARB(exec, _mesa_ProgramEnvParameter4fARB);
+      SET_ProgramEnvParameter4fvARB(exec, _mesa_ProgramEnvParameter4fvARB);
+      SET_ProgramLocalParameter4dARB(exec, _mesa_ProgramLocalParameter4dARB);
+      SET_ProgramLocalParameter4dvARB(exec, _mesa_ProgramLocalParameter4dvARB);
+      SET_ProgramLocalParameter4fARB(exec, _mesa_ProgramLocalParameter4fARB);
+      SET_ProgramLocalParameter4fvARB(exec, _mesa_ProgramLocalParameter4fvARB);
+      SET_GetProgramEnvParameterdvARB(exec, _mesa_GetProgramEnvParameterdvARB);
+      SET_GetProgramEnvParameterfvARB(exec, _mesa_GetProgramEnvParameterfvARB);
+      SET_GetProgramLocalParameterdvARB(exec, _mesa_GetProgramLocalParameterdvARB);
+      SET_GetProgramLocalParameterfvARB(exec, _mesa_GetProgramLocalParameterfvARB);
+      SET_GetProgramStringARB(exec, _mesa_GetProgramStringARB);
+   }
    SET_GetProgramivARB(exec, _mesa_GetProgramivARB);
-   SET_GetProgramStringARB(exec, _mesa_GetProgramStringARB);
 #endif
 
    /* ARB 28. GL_ARB_vertex_buffer_object */
@@ -657,13 +675,17 @@ _mesa_create_exec_table(struct gl_context *ctx)
    SET_ReadnPixelsARB(exec, _mesa_ReadnPixelsARB);
 
   /* GL_ATI_fragment_shader */
-   _mesa_init_ati_fragment_shader_dispatch(exec);
+   if (ctx->API == API_OPENGL) {
+      _mesa_init_ati_fragment_shader_dispatch(exec);
+   }
 
   /* GL_ATI_envmap_bumpmap */
-   SET_GetTexBumpParameterivATI(exec, _mesa_GetTexBumpParameterivATI);
-   SET_GetTexBumpParameterfvATI(exec, _mesa_GetTexBumpParameterfvATI);
-   SET_TexBumpParameterivATI(exec, _mesa_TexBumpParameterivATI);
-   SET_TexBumpParameterfvATI(exec, _mesa_TexBumpParameterfvATI);
+   if (ctx->API == API_OPENGL) {
+      SET_GetTexBumpParameterivATI(exec, _mesa_GetTexBumpParameterivATI);
+      SET_GetTexBumpParameterfvATI(exec, _mesa_GetTexBumpParameterfvATI);
+      SET_TexBumpParameterivATI(exec, _mesa_TexBumpParameterivATI);
+      SET_TexBumpParameterfvATI(exec, _mesa_TexBumpParameterfvATI);
+   }
 
 #if FEATURE_EXT_framebuffer_object
    SET_IsRenderbufferEXT(exec, _mesa_IsRenderbufferEXT);
@@ -691,8 +713,10 @@ _mesa_create_exec_table(struct gl_context *ctx)
 
    /* GL_EXT_gpu_program_parameters */
 #if FEATURE_ARB_vertex_program || FEATURE_ARB_fragment_program
-   SET_ProgramEnvParameters4fvEXT(exec, _mesa_ProgramEnvParameters4fvEXT);
-   SET_ProgramLocalParameters4fvEXT(exec, _mesa_ProgramLocalParameters4fvEXT);
+   if (ctx->API == API_OPENGL) {
+      SET_ProgramEnvParameters4fvEXT(exec, _mesa_ProgramEnvParameters4fvEXT);
+      SET_ProgramLocalParameters4fvEXT(exec, _mesa_ProgramLocalParameters4fvEXT);
+   }
 #endif
 
    /* GL_MESA_texture_array / GL_EXT_texture_array */
@@ -701,7 +725,9 @@ _mesa_create_exec_table(struct gl_context *ctx)
 #endif
 
    /* GL_ATI_separate_stencil */
-   SET_StencilFuncSeparateATI(exec, _mesa_StencilFuncSeparateATI);
+   if (ctx->API == API_OPENGL) {
+      SET_StencilFuncSeparateATI(exec, _mesa_StencilFuncSeparateATI);
+   }
 
 #if FEATURE_ARB_framebuffer_object
    /* The ARB_fbo functions are the union of
diff --git a/src/mesa/main/extensions.c b/src/mesa/main/extensions.c
index 5e13a93..521fe14 100644
--- a/src/mesa/main/extensions.c
+++ b/src/mesa/main/extensions.c
@@ -88,15 +88,15 @@ static const struct extension extension_table[] = {
    { "GL_ARB_debug_output",                        o(dummy_true),                              GL,             2009 },
    { "GL_ARB_depth_buffer_float",                  o(ARB_depth_buffer_float),                  GL,             2008 },
    { "GL_ARB_depth_clamp",                         o(ARB_depth_clamp),                         GL,             2003 },
-   { "GL_ARB_depth_texture",                       o(ARB_depth_texture),                       GL,             2001 },
+   { "GL_ARB_depth_texture",                       o(ARB_depth_texture),                       GLL,            2001 },
    { "GL_ARB_draw_buffers",                        o(dummy_true),                              GL,             2002 },
    { "GL_ARB_draw_buffers_blend",                  o(ARB_draw_buffers_blend),                  GL,             2009 },
    { "GL_ARB_draw_elements_base_vertex",           o(ARB_draw_elements_base_vertex),           GL,             2009 },
    { "GL_ARB_draw_instanced",                      o(ARB_draw_instanced),                      GL,             2008 },
    { "GL_ARB_explicit_attrib_location",            o(ARB_explicit_attrib_location),            GL,             2009 },
    { "GL_ARB_fragment_coord_conventions",          o(ARB_fragment_coord_conventions),          GL,             2009 },
-   { "GL_ARB_fragment_program",                    o(ARB_fragment_program),                    GL,             2002 },
-   { "GL_ARB_fragment_program_shadow",             o(ARB_fragment_program_shadow),             GL,             2003 },
+   { "GL_ARB_fragment_program",                    o(ARB_fragment_program),                    GLL,            2002 },
+   { "GL_ARB_fragment_program_shadow",             o(ARB_fragment_program_shadow),             GLL,            2003 },
    { "GL_ARB_fragment_shader",                     o(ARB_fragment_shader),                     GL,             2002 },
    { "GL_ARB_framebuffer_object",                  o(ARB_framebuffer_object),                  GL,             2005 },
    { "GL_ARB_framebuffer_sRGB",                    o(EXT_framebuffer_sRGB),                    GL,             1998 },
@@ -104,12 +104,12 @@ static const struct extension extension_table[] = {
    { "GL_ARB_half_float_vertex",                   o(ARB_half_float_vertex),                   GL,             2008 },
    { "GL_ARB_instanced_arrays",                    o(ARB_instanced_arrays),                    GL,             2008 },
    { "GL_ARB_map_buffer_range",                    o(ARB_map_buffer_range),                    GL,             2008 },
-   { "GL_ARB_multisample",                         o(dummy_true),                              GL,             1994 },
-   { "GL_ARB_multitexture",                        o(dummy_true),                              GL,             1998 },
+   { "GL_ARB_multisample",                         o(dummy_true),                              GLL,            1994 },
+   { "GL_ARB_multitexture",                        o(dummy_true),                              GLL,            1998 },
    { "GL_ARB_occlusion_query2",                    o(ARB_occlusion_query2),                    GL,             2003 },
-   { "GL_ARB_occlusion_query",                     o(ARB_occlusion_query),                     GL,             2001 },
+   { "GL_ARB_occlusion_query",                     o(ARB_occlusion_query),                     GLL,            2001 },
    { "GL_ARB_pixel_buffer_object",                 o(EXT_pixel_buffer_object),                 GL,             2004 },
-   { "GL_ARB_point_parameters",                    o(EXT_point_parameters),                    GL,             1997 },
+   { "GL_ARB_point_parameters",                    o(EXT_point_parameters),                    GLL,            1997 },
    { "GL_ARB_point_sprite",                        o(ARB_point_sprite),                        GL,             2003 },
    { "GL_ARB_provoking_vertex",                    o(EXT_provoking_vertex),                    GL,             2009 },
    { "GL_ARB_robustness",                          o(dummy_true),                              GL,             2010 },
@@ -119,21 +119,21 @@ static const struct extension extension_table[] = {
    { "GL_ARB_shader_objects",                      o(ARB_shader_objects),                      GL,             2002 },
    { "GL_ARB_shader_stencil_export",               o(ARB_shader_stencil_export),               GL,             2009 },
    { "GL_ARB_shader_texture_lod",                  o(ARB_shader_texture_lod),                  GL,             2009 },
-   { "GL_ARB_shading_language_100",                o(ARB_shading_language_100),                GL,             2003 },
+   { "GL_ARB_shading_language_100",                o(ARB_shading_language_100),                GLL,            2003 },
    { "GL_ARB_shadow_ambient",                      o(ARB_shadow_ambient),                      GL,             2001 },
-   { "GL_ARB_shadow",                              o(ARB_shadow),                              GL,             2001 },
+   { "GL_ARB_shadow",                              o(ARB_shadow),                              GLL,            2001 },
    { "GL_ARB_sync",                                o(ARB_sync),                                GL,             2003 },
-   { "GL_ARB_texture_border_clamp",                o(ARB_texture_border_clamp),                GL,             2000 },
+   { "GL_ARB_texture_border_clamp",                o(ARB_texture_border_clamp),                GLL,            2000 },
    { "GL_ARB_texture_buffer_object",               o(ARB_texture_buffer_object),               GL,             2008 },
-   { "GL_ARB_texture_compression",                 o(dummy_true),                              GL,             2000 },
+   { "GL_ARB_texture_compression",                 o(dummy_true),                              GLL,            2000 },
    { "GL_ARB_texture_compression_rgtc",            o(ARB_texture_compression_rgtc),            GL,             2004 },
-   { "GL_ARB_texture_cube_map",                    o(ARB_texture_cube_map),                    GL,             1999 },
-   { "GL_ARB_texture_env_add",                     o(dummy_true),                              GL,             1999 },
-   { "GL_ARB_texture_env_combine",                 o(ARB_texture_env_combine),                 GL,             2001 },
-   { "GL_ARB_texture_env_crossbar",                o(ARB_texture_env_crossbar),                GL,             2001 },
-   { "GL_ARB_texture_env_dot3",                    o(ARB_texture_env_dot3),                    GL,             2001 },
+   { "GL_ARB_texture_cube_map",                    o(ARB_texture_cube_map),                    GLL,            1999 },
+   { "GL_ARB_texture_env_add",                     o(dummy_true),                              GLL,            1999 },
+   { "GL_ARB_texture_env_combine",                 o(ARB_texture_env_combine),                 GLL,            2001 },
+   { "GL_ARB_texture_env_crossbar",                o(ARB_texture_env_crossbar),                GLL,            2001 },
+   { "GL_ARB_texture_env_dot3",                    o(ARB_texture_env_dot3),                    GLL,            2001 },
    { "GL_ARB_texture_float",                       o(ARB_texture_float),                       GL,             2004 },
-   { "GL_ARB_texture_mirrored_repeat",             o(dummy_true),                              GL,             2001 },
+   { "GL_ARB_texture_mirrored_repeat",             o(dummy_true),                              GLL,            2001 },
    { "GL_ARB_texture_multisample",                 o(ARB_texture_multisample),                 GL,             2009 },
    { "GL_ARB_texture_non_power_of_two",            o(ARB_texture_non_power_of_two),            GL,             2003 },
    { "GL_ARB_texture_rectangle",                   o(NV_texture_rectangle),                    GL,             2004 },
@@ -145,74 +145,74 @@ static const struct extension extension_table[] = {
    { "GL_ARB_transform_feedback2",                 o(ARB_transform_feedback2),                 GL,             2010 },
    { "GL_ARB_transform_feedback3",                 o(ARB_transform_feedback3),                 GL,             2010 },
    { "GL_ARB_transform_feedback_instanced",        o(ARB_transform_feedback_instanced),        GL,             2011 },
-   { "GL_ARB_transpose_matrix",                    o(ARB_transpose_matrix),                    GL,             1999 },
+   { "GL_ARB_transpose_matrix",                    o(ARB_transpose_matrix),                    GLL,            1999 },
    { "GL_ARB_uniform_buffer_object",               o(ARB_uniform_buffer_object),               GL,             2009 },
    { "GL_ARB_vertex_array_bgra",                   o(EXT_vertex_array_bgra),                   GL,             2008 },
    { "GL_ARB_vertex_array_object",                 o(ARB_vertex_array_object),                 GL,             2006 },
-   { "GL_ARB_vertex_buffer_object",                o(dummy_true),                              GL,             2003 },
-   { "GL_ARB_vertex_program",                      o(ARB_vertex_program),                      GL,             2002 },
+   { "GL_ARB_vertex_buffer_object",                o(dummy_true),                              GLL,            2003 },
+   { "GL_ARB_vertex_program",                      o(ARB_vertex_program),                      GLL,            2002 },
    { "GL_ARB_vertex_shader",                       o(ARB_vertex_shader),                       GL,             2002 },
    { "GL_ARB_vertex_type_2_10_10_10_rev",          o(ARB_vertex_type_2_10_10_10_rev),          GL,             2009 },
-   { "GL_ARB_window_pos",                          o(ARB_window_pos),                          GL,             2001 },
+   { "GL_ARB_window_pos",                          o(ARB_window_pos),                          GLL,            2001 },
    /* EXT extensions */
    { "GL_EXT_abgr",                                o(dummy_true),                              GL,             1995 },
-   { "GL_EXT_bgra",                                o(dummy_true),                              GL,             1995 },
-   { "GL_EXT_blend_color",                         o(EXT_blend_color),                         GL,             1995 },
+   { "GL_EXT_bgra",                                o(dummy_true),                              GLL,            1995 },
+   { "GL_EXT_blend_color",                         o(EXT_blend_color),                         GLL,            1995 },
    { "GL_EXT_blend_equation_separate",             o(EXT_blend_equation_separate),             GL,             2003 },
-   { "GL_EXT_blend_func_separate",                 o(EXT_blend_func_separate),                 GL,             1999 },
-   { "GL_EXT_blend_minmax",                        o(EXT_blend_minmax),                        GL | ES1 | ES2, 1995 },
-   { "GL_EXT_blend_subtract",                      o(dummy_true),                              GL,             1995 },
+   { "GL_EXT_blend_func_separate",                 o(EXT_blend_func_separate),                 GLL,            1999 },
+   { "GL_EXT_blend_minmax",                        o(EXT_blend_minmax),                        GLL | ES1 | ES2, 1995 },
+   { "GL_EXT_blend_subtract",                      o(dummy_true),                              GLL,            1995 },
    { "GL_EXT_clip_volume_hint",                    o(EXT_clip_volume_hint),                    GL,             1996 },
-   { "GL_EXT_compiled_vertex_array",               o(EXT_compiled_vertex_array),               GL,             1996 },
-   { "GL_EXT_copy_texture",                        o(dummy_true),                              GL,             1995 },
+   { "GL_EXT_compiled_vertex_array",               o(EXT_compiled_vertex_array),               GLL,            1996 },
+   { "GL_EXT_copy_texture",                        o(dummy_true),                              GLL,            1995 },
    { "GL_EXT_depth_bounds_test",                   o(EXT_depth_bounds_test),                   GL,             2002 },
    { "GL_EXT_draw_buffers2",                       o(EXT_draw_buffers2),                       GL,             2006 },
    { "GL_EXT_draw_instanced",                      o(ARB_draw_instanced),                      GL,             2006 },
-   { "GL_EXT_draw_range_elements",                 o(EXT_draw_range_elements),                 GL,             1997 },
-   { "GL_EXT_fog_coord",                           o(EXT_fog_coord),                           GL,             1999 },
+   { "GL_EXT_draw_range_elements",                 o(EXT_draw_range_elements),                 GLL,            1997 },
+   { "GL_EXT_fog_coord",                           o(EXT_fog_coord),                           GLL,            1999 },
    { "GL_EXT_framebuffer_blit",                    o(EXT_framebuffer_blit),                    GL,             2005 },
    { "GL_EXT_framebuffer_multisample",             o(EXT_framebuffer_multisample),             GL,             2005 },
    { "GL_EXT_framebuffer_object",                  o(EXT_framebuffer_object),                  GL,             2000 },
    { "GL_EXT_framebuffer_sRGB",                    o(EXT_framebuffer_sRGB),                    GL,             1998 },
-   { "GL_EXT_gpu_program_parameters",              o(EXT_gpu_program_parameters),              GL,             2006 },
+   { "GL_EXT_gpu_program_parameters",              o(EXT_gpu_program_parameters),              GLL,            2006 },
    { "GL_EXT_gpu_shader4",                         o(EXT_gpu_shader4),                         GL,             2006 },
-   { "GL_EXT_multi_draw_arrays",                   o(dummy_true),                              GL | ES1 | ES2, 1999 },
+   { "GL_EXT_multi_draw_arrays",                   o(dummy_true),                              GLL | ES1 | ES2, 1999 },
    { "GL_EXT_packed_depth_stencil",                o(EXT_packed_depth_stencil),                GL,             2005 },
    { "GL_EXT_packed_float",                        o(EXT_packed_float),                        GL,             2004 },
-   { "GL_EXT_packed_pixels",                       o(EXT_packed_pixels),                       GL,             1997 },
+   { "GL_EXT_packed_pixels",                       o(EXT_packed_pixels),                       GLL,            1997 },
    { "GL_EXT_pixel_buffer_object",                 o(EXT_pixel_buffer_object),                 GL,             2004 },
-   { "GL_EXT_point_parameters",                    o(EXT_point_parameters),                    GL,             1997 },
-   { "GL_EXT_polygon_offset",                      o(dummy_true),                              GL,             1995 },
+   { "GL_EXT_point_parameters",                    o(EXT_point_parameters),                    GLL,            1997 },
+   { "GL_EXT_polygon_offset",                      o(dummy_true),                              GLL,            1995 },
    { "GL_EXT_provoking_vertex",                    o(EXT_provoking_vertex),                    GL,             2009 },
-   { "GL_EXT_rescale_normal",                      o(EXT_rescale_normal),                      GL,             1997 },
-   { "GL_EXT_secondary_color",                     o(EXT_secondary_color),                     GL,             1999 },
-   { "GL_EXT_separate_shader_objects",             o(EXT_separate_shader_objects),             GL,             2008 },
-   { "GL_EXT_separate_specular_color",             o(EXT_separate_specular_color),             GL,             1997 },
-   { "GL_EXT_shadow_funcs",                        o(EXT_shadow_funcs),                        GL,             2002 },
-   { "GL_EXT_stencil_two_side",                    o(EXT_stencil_two_side),                    GL,             2001 },
-   { "GL_EXT_stencil_wrap",                        o(dummy_true),                              GL,             2002 },
-   { "GL_EXT_subtexture",                          o(dummy_true),                              GL,             1995 },
-   { "GL_EXT_texture3D",                           o(EXT_texture3D),                           GL,             1996 },
+   { "GL_EXT_rescale_normal",                      o(EXT_rescale_normal),                      GLL,            1997 },
+   { "GL_EXT_secondary_color",                     o(EXT_secondary_color),                     GLL,            1999 },
+   { "GL_EXT_separate_shader_objects",             o(EXT_separate_shader_objects),             GLL,            2008 },
+   { "GL_EXT_separate_specular_color",             o(EXT_separate_specular_color),             GLL,            1997 },
+   { "GL_EXT_shadow_funcs",                        o(EXT_shadow_funcs),                        GLL,            2002 },
+   { "GL_EXT_stencil_two_side",                    o(EXT_stencil_two_side),                    GLL,            2001 },
+   { "GL_EXT_stencil_wrap",                        o(dummy_true),                              GLL,            2002 },
+   { "GL_EXT_subtexture",                          o(dummy_true),                              GLL,            1995 },
+   { "GL_EXT_texture3D",                           o(EXT_texture3D),                           GLL,            1996 },
    { "GL_EXT_texture_array",                       o(EXT_texture_array),                       GL,             2006 },
    { "GL_EXT_texture_compression_dxt1",            o(EXT_texture_compression_s3tc),            GL | ES1 | ES2, 2004 },
    { "GL_EXT_texture_compression_latc",            o(EXT_texture_compression_latc),            GL,             2006 },
    { "GL_EXT_texture_compression_rgtc",            o(ARB_texture_compression_rgtc),            GL,             2004 },
    { "GL_EXT_texture_compression_s3tc",            o(EXT_texture_compression_s3tc),            GL,             2000 },
-   { "GL_EXT_texture_cube_map",                    o(ARB_texture_cube_map),                    GL,             2001 },
-   { "GL_EXT_texture_edge_clamp",                  o(dummy_true),                              GL,             1997 },
-   { "GL_EXT_texture_env_add",                     o(dummy_true),                              GL,             1999 },
-   { "GL_EXT_texture_env_combine",                 o(dummy_true),                              GL,             2000 },
-   { "GL_EXT_texture_env_dot3",                    o(EXT_texture_env_dot3),                    GL,             2000 },
+   { "GL_EXT_texture_cube_map",                    o(ARB_texture_cube_map),                    GLL,            2001 },
+   { "GL_EXT_texture_edge_clamp",                  o(dummy_true),                              GLL,            1997 },
+   { "GL_EXT_texture_env_add",                     o(dummy_true),                              GLL,            1999 },
+   { "GL_EXT_texture_env_combine",                 o(dummy_true),                              GLL,            2000 },
+   { "GL_EXT_texture_env_dot3",                    o(EXT_texture_env_dot3),                    GLL,            2000 },
    { "GL_EXT_texture_filter_anisotropic",          o(EXT_texture_filter_anisotropic),          GL | ES1 | ES2, 1999 },
    { "GL_EXT_texture_format_BGRA8888",             o(dummy_true),                                   ES1 | ES2, 2005 },
    { "GL_EXT_texture_rg",                          o(ARB_texture_rg),                                     ES2, 2011 },
    { "GL_EXT_read_format_bgra",                    o(dummy_true),                                   ES1 | ES2, 2009 },
    { "GL_EXT_texture_integer",                     o(EXT_texture_integer),                     GL,             2006 },
-   { "GL_EXT_texture_lod_bias",                    o(dummy_true),                              GL | ES1,       1999 },
+   { "GL_EXT_texture_lod_bias",                    o(dummy_true),                              GLL | ES1,      1999 },
    { "GL_EXT_texture_mirror_clamp",                o(EXT_texture_mirror_clamp),                GL,             2004 },
-   { "GL_EXT_texture_object",                      o(dummy_true),                              GL,             1995 },
-   { "GL_EXT_texture",                             o(dummy_true),                              GL,             1996 },
-   { "GL_EXT_texture_rectangle",                   o(NV_texture_rectangle),                    GL,             2004 },
+   { "GL_EXT_texture_object",                      o(dummy_true),                              GLL,            1995 },
+   { "GL_EXT_texture",                             o(dummy_true),                              GLL,            1996 },
+   { "GL_EXT_texture_rectangle",                   o(NV_texture_rectangle),                    GLL,            2004 },
    { "GL_EXT_texture_shared_exponent",             o(EXT_texture_shared_exponent),             GL,             2004 },
    { "GL_EXT_texture_snorm",                       o(EXT_texture_snorm),                       GL,             2009 },
    { "GL_EXT_texture_sRGB",                        o(EXT_texture_sRGB),                        GL,             2004 },
@@ -223,7 +223,7 @@ static const struct extension extension_table[] = {
    { "GL_EXT_transform_feedback",                  o(EXT_transform_feedback),                  GL,             2011 },
    { "GL_EXT_unpack_subimage",                     o(dummy_true),                                         ES2, 2011 },
    { "GL_EXT_vertex_array_bgra",                   o(EXT_vertex_array_bgra),                   GL,             2008 },
-   { "GL_EXT_vertex_array",                        o(dummy_true),                              GL,             1995 },
+   { "GL_EXT_vertex_array",                        o(dummy_true),                              GLL,            1995 },
 
    /* OES extensions */
    { "GL_OES_blend_equation_separate",             o(EXT_blend_equation_separate),                  ES1,       2009 },
@@ -274,52 +274,52 @@ static const struct extension extension_table[] = {
    { "GL_AMD_seamless_cubemap_per_texture",        o(AMD_seamless_cubemap_per_texture),        GL,             2009 },
    { "GL_AMD_shader_stencil_export",               o(ARB_shader_stencil_export),               GL,             2009 },
    { "GL_APPLE_object_purgeable",                  o(APPLE_object_purgeable),                  GL,             2006 },
-   { "GL_APPLE_packed_pixels",                     o(APPLE_packed_pixels),                     GL,             2002 },
-   { "GL_APPLE_vertex_array_object",               o(APPLE_vertex_array_object),               GL,             2002 },
+   { "GL_APPLE_packed_pixels",                     o(APPLE_packed_pixels),                     GLL,            2002 },
+   { "GL_APPLE_vertex_array_object",               o(APPLE_vertex_array_object),               GLL,            2002 },
    { "GL_ATI_blend_equation_separate",             o(EXT_blend_equation_separate),             GL,             2003 },
-   { "GL_ATI_draw_buffers",                        o(dummy_true),                              GL,             2002 },
-   { "GL_ATI_envmap_bumpmap",                      o(ATI_envmap_bumpmap),                      GL,             2001 },
-   { "GL_ATI_fragment_shader",                     o(ATI_fragment_shader),                     GL,             2001 },
-   { "GL_ATI_separate_stencil",                    o(ATI_separate_stencil),                    GL,             2006 },
+   { "GL_ATI_draw_buffers",                        o(dummy_true),                              GLL,            2002 },
+   { "GL_ATI_envmap_bumpmap",                      o(ATI_envmap_bumpmap),                      GLL,            2001 },
+   { "GL_ATI_fragment_shader",                     o(ATI_fragment_shader),                     GLL,            2001 },
+   { "GL_ATI_separate_stencil",                    o(ATI_separate_stencil),                    GLL,            2006 },
    { "GL_ATI_texture_compression_3dc",             o(ATI_texture_compression_3dc),             GL,             2004 },
-   { "GL_ATI_texture_env_combine3",                o(ATI_texture_env_combine3),                GL,             2002 },
+   { "GL_ATI_texture_env_combine3",                o(ATI_texture_env_combine3),                GLL,            2002 },
    { "GL_ATI_texture_float",                       o(ARB_texture_float),                       GL,             2002 },
    { "GL_ATI_texture_mirror_once",                 o(ATI_texture_mirror_once),                 GL,             2006 },
    { "GL_IBM_multimode_draw_arrays",               o(IBM_multimode_draw_arrays),               GL,             1998 },
    { "GL_IBM_rasterpos_clip",                      o(IBM_rasterpos_clip),                      GL,             1996 },
-   { "GL_IBM_texture_mirrored_repeat",             o(dummy_true),                              GL,             1998 },
-   { "GL_INGR_blend_func_separate",                o(EXT_blend_func_separate),                 GL,             1999 },
+   { "GL_IBM_texture_mirrored_repeat",             o(dummy_true),                              GLL,            1998 },
+   { "GL_INGR_blend_func_separate",                o(EXT_blend_func_separate),                 GLL,            1999 },
    { "GL_MESA_pack_invert",                        o(MESA_pack_invert),                        GL,             2002 },
    { "GL_MESA_resize_buffers",                     o(MESA_resize_buffers),                     GL,             1999 },
-   { "GL_MESA_texture_array",                      o(MESA_texture_array),                      GL,             2007 },
+   { "GL_MESA_texture_array",                      o(MESA_texture_array),                      GLL,            2007 },
    { "GL_MESA_texture_signed_rgba",                o(EXT_texture_snorm),                       GL,             2009 },
-   { "GL_MESA_window_pos",                         o(ARB_window_pos),                          GL,             2000 },
+   { "GL_MESA_window_pos",                         o(ARB_window_pos),                          GLL,            2000 },
    { "GL_MESA_ycbcr_texture",                      o(MESA_ycbcr_texture),                      GL,             2002 },
-   { "GL_NV_blend_square",                         o(NV_blend_square),                         GL,             1999 },
+   { "GL_NV_blend_square",                         o(NV_blend_square),                         GLL,            1999 },
    { "GL_NV_conditional_render",                   o(NV_conditional_render),                   GL,             2008 },
    { "GL_NV_depth_clamp",                          o(ARB_depth_clamp),                         GL,             2001 },
    { "GL_NV_draw_buffers",                         o(dummy_true),                                         ES2, 2011 },
    { "GL_NV_fbo_color_attachments",                o(EXT_framebuffer_object),                             ES2, 2010 },
-   { "GL_NV_fog_distance",                         o(NV_fog_distance),                         GL,             2001 },
-   { "GL_NV_fragment_program",                     o(NV_fragment_program),                     GL,             2001 },
-   { "GL_NV_fragment_program_option",              o(NV_fragment_program_option),              GL,             2005 },
-   { "GL_NV_light_max_exponent",                   o(NV_light_max_exponent),                   GL,             1999 },
+   { "GL_NV_fog_distance",                         o(NV_fog_distance),                         GLL,            2001 },
+   { "GL_NV_fragment_program",                     o(NV_fragment_program),                     GLL,            2001 },
+   { "GL_NV_fragment_program_option",              o(NV_fragment_program_option),              GLL,            2005 },
+   { "GL_NV_light_max_exponent",                   o(NV_light_max_exponent),                   GLL,            1999 },
    { "GL_NV_packed_depth_stencil",                 o(EXT_packed_depth_stencil),                GL,             2000 },
    { "GL_NV_point_sprite",                         o(NV_point_sprite),                         GL,             2001 },
    { "GL_NV_primitive_restart",                    o(NV_primitive_restart),                    GL,             2002 },
    { "GL_NV_read_buffer",                          o(dummy_true),                              ES2,            2011 },
-   { "GL_NV_texgen_reflection",                    o(NV_texgen_reflection),                    GL,             1999 },
+   { "GL_NV_texgen_reflection",                    o(NV_texgen_reflection),                    GLL,            1999 },
    { "GL_NV_texture_barrier",                      o(NV_texture_barrier),                      GL,             2009 },
-   { "GL_NV_texture_env_combine4",                 o(NV_texture_env_combine4),                 GL,             1999 },
-   { "GL_NV_texture_rectangle",                    o(NV_texture_rectangle),                    GL,             2000 },
-   { "GL_NV_vertex_program1_1",                    o(NV_vertex_program1_1),                    GL,             2001 },
-   { "GL_NV_vertex_program",                       o(NV_vertex_program),                       GL,             2000 },
+   { "GL_NV_texture_env_combine4",                 o(NV_texture_env_combine4),                 GLL,            1999 },
+   { "GL_NV_texture_rectangle",                    o(NV_texture_rectangle),                    GLL,            2000 },
+   { "GL_NV_vertex_program1_1",                    o(NV_vertex_program1_1),                    GLL,            2001 },
+   { "GL_NV_vertex_program",                       o(NV_vertex_program),                       GLL,            2000 },
    { "GL_S3_s3tc",                                 o(S3_s3tc),                                 GL,             1999 },
-   { "GL_SGIS_generate_mipmap",                    o(dummy_true),                              GL,             1997 },
-   { "GL_SGIS_texture_border_clamp",               o(ARB_texture_border_clamp),                GL,             1997 },
-   { "GL_SGIS_texture_edge_clamp",                 o(dummy_true),                              GL,             1997 },
-   { "GL_SGIS_texture_lod",                        o(SGIS_texture_lod),                        GL,             1997 },
-   { "GL_SUN_multi_draw_arrays",                   o(dummy_true),                              GL,             1999 },
+   { "GL_SGIS_generate_mipmap",                    o(dummy_true),                              GLL,            1997 },
+   { "GL_SGIS_texture_border_clamp",               o(ARB_texture_border_clamp),                GLL,            1997 },
+   { "GL_SGIS_texture_edge_clamp",                 o(dummy_true),                              GLL,            1997 },
+   { "GL_SGIS_texture_lod",                        o(SGIS_texture_lod),                        GLL,            1997 },
+   { "GL_SUN_multi_draw_arrays",                   o(dummy_true),                              GLL,            1999 },
 
    { 0, 0, 0, 0 },
 };
