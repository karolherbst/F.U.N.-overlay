From edacf75af59a523d51d0cd1c1cc55cb2febf4c67 Mon Sep 17 00:00:00 2001
From: Karol Herbst <git@karolherbst.de>
Date: Tue, 26 Feb 2013 20:37:26 +0100
Subject: [PATCH 2/2] test implementation of GLX_ARB_create_context

I don't think this should be it at all. But it can be used to create Core profiles where needed. This commit does not claim perfect implementation, just use it at own risk, if you really need this

v2: rebase on master (adding GLX_SGIX_pbuffer)
v3: rebase on master

fixup
---
 glx-reimpl.def |  2 ++
 libglfork.cpp  | 19 ++++++++++++++++++-
 2 files changed, 20 insertions(+), 1 deletion(-)

diff --git a/glx-reimpl.def b/glx-reimpl.def
index 4996443..4932593 100644
--- a/glx-reimpl.def
+++ b/glx-reimpl.def
@@ -6,6 +6,8 @@ DEF_GLX_PROTO(Bool,       glXMakeCurrent,       (Display *dpy, GLXDrawable drawa
 DEF_GLX_PROTO(Bool,       glXMakeContextCurrent,(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
 DEF_GLX_PROTO(void,       glXSwapBuffers,       (Display *dpy, GLXDrawable drawable))
 
+DEF_GLX_PROTO(GLXContext, glXCreateContextAttribsARB, (Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list))
+
 DEF_GLX_PROTO(__GLXextFuncPtr, glXGetProcAddressARB, (const GLubyte *))
 DEF_GLX_PROTO(__GLXextFuncPtr, glXGetProcAddress,    (const GLubyte *))
 
diff --git a/libglfork.cpp b/libglfork.cpp
index 0303275..45c0145 100644
--- a/libglfork.cpp
+++ b/libglfork.cpp
@@ -517,6 +517,18 @@ GLXContext glXCreateContext(Display *dpy, XVisualInfo *vis, GLXContext shareList
   return actx;
 }
 
+GLXContext glXCreateContextAttribsARB(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
+{
+  if (isDedicatedSupportingCoreProfiles(dpy))
+  {
+    GLXContext actx = primus.afns.glXCreateContextAttribsARB(primus.adpy, config, share_context, direct, attrib_list);
+    primus.contexts.record(actx, config, share_context);
+    return actx;
+  }
+  // TODO: error string? But this should never happen, because we don't push out the Extensions string
+  return NULL;
+}
+
 GLXContext glXCreateNewContext(Display *dpy, GLXFBConfig config, int renderType, GLXContext shareList, Bool direct)
 {
   GLXContext actx = primus.afns.glXCreateNewContext(primus.adpy, config, renderType, shareList, direct);
@@ -870,13 +882,18 @@ const char *glXGetClientString(Display *dpy, int name)
   {
     case GLX_VENDOR: return "primus";
     case GLX_VERSION: return "1.4";
-    case GLX_EXTENSIONS: return "GLX_ARB_get_proc_address ";
+    case GLX_EXTENSIONS:
+      if(isDedicatedSupportingCoreProfiles(dpy))
+        return "GLX_ARB_create_context GLX_ARB_create_context_profile GLX_ARB_get_proc_address ";
+      return "GLX_ARB_get_proc_address ";
     default: return NULL;
   }
 }
 
 const char *glXQueryExtensionsString(Display *dpy, int screen)
 {
+  if(isDedicatedSupportingCoreProfiles(dpy))
+    return "GLX_ARB_create_context GLX_ARB_create_context_profile GLX_ARB_get_proc_address ";
   return "GLX_ARB_get_proc_address ";
 }
 
-- 
1.8.2.1

